<?php

/**
 * @file
 * Contains linkback_pingback.module..
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityStorageException;

/**
 * Implements hook_help().
 */
function linkback_pingback_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the linkback_pingback module.
    case 'help.page.linkback_pingback':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('pingback functions for linkback') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_xmlrpc().
 *
 * This XML-RPC endpoint handles registration of incoming pingback requests.
 */
function linkback_pingback_xmlrpc() {
  return array(
    array(
      'pingback.ping',
      'linkback_pingback__receive_pingback',
      // Return value is a string.
      // There are 2 string parameters.
      array('string', 'string', 'string'),
      t('Handles pingback pings.'),
    ),
  );
}

/**
 * Implements hook_node_view().
 *
 * Adds a HTTP header and a <link> tag which give the pingback server endpoint
 * URL.
 */
function linkback_pingback_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // @TODO: configurable view-modes?
  if ($view_mode == 'full' /*&& linkback_node_allows_linkback($node, 'receive')*/) {
    $pingback_endpoint = Url::fromRoute('xmlrpc', [], ['absolute' => TRUE])->toString();
    $pingback_link = array(
      '#type' => 'html_tag',
      '#tag' => 'link',
      '#attributes' => array(
        'rel' => 'pingback',
        'href' => $pingback_endpoint,
      ),
    );
    $build['#attached']['html_head'][] = [$pingback_link, 'linkback_pingback'];
  }
}

/**
 * XML-RPC callback for the pingback.ping method.
 *
 * @param string $source_uri
 *   The URL of the third-party post.
 * @param string $target_uri
 *   The URL of the node on this site.
 */
function linkback_pingback__receive_pingback($source_uri, $target_uri) {
  // The pingback protocol defines a static schema of 2 fields: sourceURI and
  // targetURI. No other data may be exchanged within the pingback protocol.
  // TODO Arrange the incoming language to allow obtaining the content url
  // If target_uri is published in es and you connect to web in en , Url::fromuserinput
  // will not obtain the content id (nid).
  // For a case where field translate is used it's not problematic...
  global $base_url;
  try {
    $alias = str_replace($base_url, "", $target_uri);

    $langs = Drupal::languageManager()->getLanguages();
    foreach ($langs as $lan) {
      // Iterate over all languages to get entity id, here we can obtain entity type.
      $route_params = Url::fromUserInput(str_replace($base_url, "", $target_uri), ['language' => $lan])->getRouteParameters();
      foreach ($route_params as $entity_type => $entity_id) {
        // VALID ONLY FOR FIELD translate (as node translate has various nids for set)
        if ($entity_id) {
          $ref_content = $entity_id;
          break;
        }
      }
    }
  }
  catch (UnexpectedValueException $exception) {
    // Despite content existance will be checked by entity later, doing now will speed up.
    list ($error_code, $error_message) = _linkback_pingback__protocol_errors(LINKBACK_ERROR_LOCAL_NODE_NOT_FOUND);
    return xmlrpc_error($error_code, $error_message);
  }

  $linkback = entity_create('linkback', [
    'handler'  => 'linkback_pingback',
    'ref_content' => $ref_content,
    'url'      => $source_uri,
    'type'     => 'received',
  ]);

  try {
    $result = $linkback->save();
    $message = t('Pingback from @source to @target registered.', array('@source' => $source_uri, '@target' => $target_uri));
    return (string) $message;
  }
  catch (EntityStorageException $exception) {
    list ($error_code, $error_message) = _linkback_pingback__protocol_errors($exception->getCode());
    return xmlrpc_error($error_code, $error_message);
  }
}

/**
 * Lookup the correct pingback protocol-response for an error.
 */
function _linkback_pingback__protocol_errors($error_code) {
  // Error codes defined by the protocol documentation:
  //
  // 0
  // A generic fault code. Servers MAY use this error code instead of any of the
  // others if they do not have a way of determining the correct fault code.
  //
  // 0×0010 (16)
  // The source URI does not exist.
  //
  // 0×0011 (17)
  // The source URI does not contain a link to the target URI, and so cannot be
  // used as a source.
  //
  // 0×0020 (32)
  // The specified target URI does not exist. This MUST only be used when the
  // target definitely does not exist, rather than when the target may exist but
  // is not recognised. See the next error.
  //
  // 0×0021 (33)
  // The specified target URI cannot be used as a target. It either doesn't
  // exist, or it is not a pingback-enabled resource. For example, on a blog,
  // typically only permalinks are pingback-enabled, and trying to pingback the
  // home page, or a set of posts, will fail with this error.
  //
  // 0×0030 (48)
  // The pingback has already been registered.
  //
  // 0×0031 (49)
  // Access denied.
  //
  // 0×0032 (50)
  // The server could not communicate with an upstream server, or received an
  // error from an upstream server, and therefore could not complete the
  // request. This is similar to HTTP's 402 Bad Gateway error. This error SHOULD
  // be used by pingback proxies when propagating errors.
  switch ($error_code) {
    case LINKBACK_ERROR_LOCAL_NODE_NOT_FOUND:
      return array(0x0020, 'The specified target URI does not exist.');

    case LINKBACK_ERROR_LOCAL_NODE_REFBACK_NOT_ALLOWED:
      return array(0x0021, 'The specified target URI cannot be used as a target.');

    case LINKBACK_ERROR_REFBACK_ALREADY_REGISTERED:
      return array(0x0030, 'The pingback has already been registered.');

    default:
      return array(0, 'An error occurred trying to register the pingback. The pingback was not registered.');
  }
}
